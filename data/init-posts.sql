-- 使用 WITH RECURSIVE 生成序列
WITH RECURSIVE
  seq(value) AS (
    SELECT 1
    UNION ALL
    SELECT value + 1
    FROM seq
    WHERE value < 100
  ),
  categories AS (
    SELECT id FROM t_class
  )
INSERT INTO t_post (title, content, views, created_at, class_id)
SELECT 
  CASE (ABS(RANDOM() % 4) + 1)
    WHEN 1 THEN '如何提高编程效率和代码质量'
    WHEN 2 THEN '深入理解软件架构设计'
    WHEN 3 THEN '前端开发最佳实践指南'
    WHEN 4 THEN '数据库优化与性能调优'
  END || ' - 第' || seq.value || '篇',
  CASE (ABS(RANDOM() % 4) + 1)
    WHEN 1 THEN '在软件开发过程中，提高编程效率和代码质量是每个开发者都应该关注的重要议题。本文将从以下几个方面展开讨论：

1. 代码规范和最佳实践
首先，建立并遵循统一的代码规范是提高代码质量的基础。这包括命名规范、格式化规则、注释规范等。使用ESLint、Prettier等工具可以帮助团队保持一致的代码风格。

2. 测试驱动开发
采用TDD（测试驱动开发）方法论，先写测试再写代码，可以帮助我们更好地思考代码设计，并确保代码的正确性和可维护性。

3. 代码审查
定期进行代码审查，可以及早发现潜在问题，同时也是团队成员互相学习的好机会。建议使用Pull Request的方式进行代码审查。'
    WHEN 2 THEN '软件架构设计是构建高质量应用程序的关键。本文将探讨几个重要的架构设计原则：

1. 单一职责原则
每个模块或类应该只负责一个功能。这样可以提高代码的内聚性，降低耦合度。

2. 开闭原则
软件实体应该对扩展开放，对修改关闭。这意味着我们应该通过添加新代码而不是修改现有代码来增加新功能。

3. 依赖注入
使用依赖注入可以降低模块间的耦合度，提高代码的可测试性和可维护性。'
    WHEN 3 THEN '前端开发技术日新月异，掌握最佳实践对于提高开发效率至关重要。本文将分享一些关键的最佳实践：

1. 组件设计
- 保持组件的单一职责
- 使用合适的组件粒度
- 处理好组件间的通信

2. 状态管理
- 选择合适的状态管理方案
- 避免状态冗余
- 正确处理异步状态

3. 性能优化
- 使用懒加载和代码分割
- 优化渲染性能
- 合理使用缓存'
    WHEN 4 THEN '数据库性能对应用程序的整体性能有着重要影响。本文将介绍一些数据库优化的关键技术：

1. 索引优化
- 选择合适的索引类型
- 避免过度索引
- 定期维护索引

2. 查询优化
- 编写高效的SQL语句
- 使用适当的查询计划
- 避免常见的查询陷阱

3. 性能监控
- 设置性能基准
- 监控关键指标
- 及时发现和解决问题'
  END,
  ABS(RANDOM() % 1000),
  unixepoch() - ABS(RANDOM() % (30*24*60*60)),
  categories.id
FROM seq, categories;
